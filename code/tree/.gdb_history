p nodes[$5].upperNeighbors[0]
p nodes[$6].upperNeighbors[0]
quit
run normaltn0s2.v 
quit
run normaltn0s2.v 
bt
quit
run normaltn0s2.v 
bt
f 3
p (*i).first
p (*i).second.size
p (*i).second.lowerNeighbors.size()
p (*i).second.lowerNeighbors[0]
p (*i).second.lowerNeighbors[1]
p criticalParent[$4]
p criticalParent[$5]
quit
run normaltn0s2.v 
p index
p v
bt
f 0
p v
f 1
p curContourSeed
p contourSeeds[curContourSeed]
quit
run normaltn0s2.v 
bt
f 4
p index
p numChildren
p childIndices[0]
p nodes
wuit
y
wuit
quit
run normaltn0s2.v 
bt
f 3
p win
p numWindows
p v.getNumSlices()
p windowSize
p v.getNumSlices()/windowSize
p (v.getNumSlices()-windowSize)/(windowSize/2)
p (v.getNumSlices())/(windowSize/2)
p (v.getNumSlices()-windowSize)/(windowSize/2)+1
p (v.getNumSlices()-windowSize-1)/(windowSize/2)+1
p (72-windowSize-1)/(windowSize/2)+1
p (73-windowSize-1)/(windowSize/2)+1
p (74-windowSize-1)/(windowSize/2)+1
p (75-windowSize-1)/(windowSize/2)+1
p (76-windowSize-1)/(windowSize/2)+1
quit
run normaltn0s2.v 
quit
run normaltn0s2.v 
bt
f 0
f 1
quit
run normaltn0s2.v 
bt
p v
p neighborIndex
p z+oz
p zmax
quit
run normaltn0s2.v 
quit
run -e seedwin.txt normaltn0s2_combo250.v
bt
quit
run normaltn0s2.v 
bt
quit
run normaltn0s2.v 
quit
run normaltn0s2.v 
bt
f 5
p criticalParent
quit
run eight.v
bt
p c
p *c
p node2
p *node2
p (*node2).upperNeighbors.size()
p (*node2).second.upperNeighbors.size()
p (*node2).second.upperNeighbors.begin()
p *((*node2).second.upperNeighbors.begin())
p &c
p &criticalParent
p criticalParent
p numChildren
quit
run eight.v
p (*process).size()
quit
run eight.v
p i
p (*process).begin()
p (*process).begin()++
p ((*process).begin())+1
p ((*process).begin())
p ++((*process).begin())
p ++$5
p ++$6
p i
p *i
quit
run eight.v
p (*node2).second.upperNeighbors.size()
p (*node1).second.upperNeighbors.size()
p c
p (*node2).second.upperNeighbors.begin()
p *(*node2).second.upperNeighbors.begin()
p criticalParent.find($5)
p &c
p *$6
f 1
call leftST.printST()
call leftST.printST(0)
call rightST.printST(0)
p nodes.size()
p nodes
p (*nodes).size()
p (*nodes)[0]
p (*nodes)[1]
p (*nodes)[2]
p (*nodes)[3]
quit
run eight.v
f 1
p (*nodes).size()
p (*nodes)[0]
p (*nodes)[1]
p (*nodes)[2]
p (*nodes)[3]
p (*leftNodes).size()
p (*rightNodes).size()
p (*leftNodes)[0]
p (*leftNodes)[1]
p (*rightNodes)[0]
p (*rightNodes)[1]
p order[$8]
p order[$9]
p order[$11]
quit
run eight.v
bt
f 4
call windowJT.print()
call windowJT.printJT()
call windowJT.printJT(0)
call windowST.printST(0)
quit
run eight.v
bt
f 4
call windowJT.printJT()
call windowJT.printJT(0)
quit
run eight.v
quit
run eight.v
quit
run eight.v
bt
f 6
p (*parentNode).second.lowerNeighbors.size()
p (*parentNode).second.lowerNeighbors[0]
p (*parentNode).second.lowerNeighbors[1]
p leafNode
p (*i).first
p leafQ.size()
p leafQ.front()
p (*leafJT).second.lowerNeighbors.size()
p (*leafST).second.upperNeighbors.size()
p (*leafJT).second.upperNeighbors.size()
p parentIndex
p (*parentNode).second.lowerNeighbors.size()
p (*parentNode).second.upperNeighbors.size()
p (*parentNode).second.lowerNeighbors[0]
p (*parentNode).second.lowerNeighbors[1]
quit
run eight.v
quit
run eight.v
quit
run eight.v
bt
quit
bt
run eight.v
quit
run eight.v
bt
quit
run eight.v
quit
run eight.v
quit
run eight.v
quit
run eight.v
quit
run eight.v
quit
run eight.v
quit
run eight.v
quit
run eight.v
quit
run eight.v
quit
run eight.v
quit
run eight.v
quit
run eight.v
quit
run eight.v
quit
run eight.v
quit
run eight.v
quit
run normaltn0s2_traced1_r0.v2 normaltn0s2_traced1_r1.v2 normaltn0s2_traced1_r2.v2 normaltn0s2_traced1_combined.v2
bt
quit
run normaltn0s2_traced1_r0.v2 normaltn0s2_traced1_r1.v2 normaltn0s2_traced1_r2.v2 normaltn0s2_traced1_combined.v2
quit
run normaltn0s2.v normaltn0s2r0
quit
run normaltn0s2.v normaltn0s2r0
bt
f 3
p countEuler(0)
p (int)countEuler(0)
p (int)countEuler(0x3ffffff)
p (int)fixForVertexConnectivity(0x20B410)
p (int)countEuler($3)
p (int)countEuler(5)
p (int)countEuler(0x145)
p (int)countEuler(0x28A0145)
p (int)countEuler(0x28A0147)
quit
quit
